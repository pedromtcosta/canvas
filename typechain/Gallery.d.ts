/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GalleryInterface extends ethers.utils.Interface {
  functions: {
    "artsy()": FunctionFragment;
    "canvas(string)": FunctionFragment;
    "createCanvas(string,uint32,uint32,uint8)": FunctionFragment;
    "getFinishedArt(string)": FunctionFragment;
    "getPixels(string)": FunctionFragment;
    "getShares(string,address)": FunctionFragment;
    "getTokenId(string)": FunctionFragment;
    "hasFinishedCanvas(string)": FunctionFragment;
    "paint(string,uint32[],uint32[],uint32[])": FunctionFragment;
    "transferShares(string,uint32,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "artsy", values?: undefined): string;
  encodeFunctionData(functionFragment: "canvas", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createCanvas",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinishedArt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getPixels", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getShares",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasFinishedCanvas",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "paint",
    values: [string, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferShares",
    values: [string, BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "artsy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canvas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCanvas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinishedArt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPixels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasFinishedCanvas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferShares",
    data: BytesLike
  ): Result;

  events: {};
}

export class Gallery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GalleryInterface;

  functions: {
    artsy(overrides?: CallOverrides): Promise<[string]>;

    canvas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number, number] & {
        name: string;
        owner: string;
        maxX: number;
        maxY: number;
        paintsPerPixel: number;
        remaining: number;
      }
    >;

    createCanvas(
      _name: string,
      _maxX: BigNumberish,
      _maxY: BigNumberish,
      _paintsPerPixel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFinishedArt(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          number,
          number,
          ([number, number, number, string[], number[]] & {
            value: number;
            x: number;
            y: number;
            artists: string[];
            allValues: number[];
          })[]
        ] & {
          name: string;
          dimentsionX: number;
          dimentsionY: number;
          totalNumberOfShares: number;
          pixels: ([number, number, number, string[], number[]] & {
            value: number;
            x: number;
            y: number;
            artists: string[];
            allValues: number[];
          })[];
        }
      ]
    >;

    getPixels(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, number, number, string[], number[]] & {
          value: number;
          x: number;
          y: number;
          artists: string[];
          allValues: number[];
        })[]
      ]
    >;

    getShares(
      _canvasName: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokenId(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasFinishedCanvas(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    paint(
      _name: string,
      _xs: BigNumberish[],
      _ys: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferShares(
      _canvasName: string,
      _quantity: BigNumberish,
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  artsy(overrides?: CallOverrides): Promise<string>;

  canvas(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, number, number] & {
      name: string;
      owner: string;
      maxX: number;
      maxY: number;
      paintsPerPixel: number;
      remaining: number;
    }
  >;

  createCanvas(
    _name: string,
    _maxX: BigNumberish,
    _maxY: BigNumberish,
    _paintsPerPixel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFinishedArt(
    _canvasName: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      number,
      number,
      number,
      ([number, number, number, string[], number[]] & {
        value: number;
        x: number;
        y: number;
        artists: string[];
        allValues: number[];
      })[]
    ] & {
      name: string;
      dimentsionX: number;
      dimentsionY: number;
      totalNumberOfShares: number;
      pixels: ([number, number, number, string[], number[]] & {
        value: number;
        x: number;
        y: number;
        artists: string[];
        allValues: number[];
      })[];
    }
  >;

  getPixels(
    _name: string,
    overrides?: CallOverrides
  ): Promise<
    ([number, number, number, string[], number[]] & {
      value: number;
      x: number;
      y: number;
      artists: string[];
      allValues: number[];
    })[]
  >;

  getShares(
    _canvasName: string,
    _owner: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokenId(
    _canvasName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasFinishedCanvas(
    _canvasName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  paint(
    _name: string,
    _xs: BigNumberish[],
    _ys: BigNumberish[],
    _values: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferShares(
    _canvasName: string,
    _quantity: BigNumberish,
    _from: string,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    artsy(overrides?: CallOverrides): Promise<string>;

    canvas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, number, number] & {
        name: string;
        owner: string;
        maxX: number;
        maxY: number;
        paintsPerPixel: number;
        remaining: number;
      }
    >;

    createCanvas(
      _name: string,
      _maxX: BigNumberish,
      _maxY: BigNumberish,
      _paintsPerPixel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getFinishedArt(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        number,
        number,
        number,
        ([number, number, number, string[], number[]] & {
          value: number;
          x: number;
          y: number;
          artists: string[];
          allValues: number[];
        })[]
      ] & {
        name: string;
        dimentsionX: number;
        dimentsionY: number;
        totalNumberOfShares: number;
        pixels: ([number, number, number, string[], number[]] & {
          value: number;
          x: number;
          y: number;
          artists: string[];
          allValues: number[];
        })[];
      }
    >;

    getPixels(
      _name: string,
      overrides?: CallOverrides
    ): Promise<
      ([number, number, number, string[], number[]] & {
        value: number;
        x: number;
        y: number;
        artists: string[];
        allValues: number[];
      })[]
    >;

    getShares(
      _canvasName: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenId(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFinishedCanvas(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    paint(
      _name: string,
      _xs: BigNumberish[],
      _ys: BigNumberish[],
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferShares(
      _canvasName: string,
      _quantity: BigNumberish,
      _from: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    artsy(overrides?: CallOverrides): Promise<BigNumber>;

    canvas(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createCanvas(
      _name: string,
      _maxX: BigNumberish,
      _maxY: BigNumberish,
      _paintsPerPixel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFinishedArt(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPixels(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getShares(
      _canvasName: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenId(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasFinishedCanvas(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paint(
      _name: string,
      _xs: BigNumberish[],
      _ys: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferShares(
      _canvasName: string,
      _quantity: BigNumberish,
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    artsy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canvas(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCanvas(
      _name: string,
      _maxX: BigNumberish,
      _maxY: BigNumberish,
      _paintsPerPixel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFinishedArt(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPixels(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShares(
      _canvasName: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenId(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasFinishedCanvas(
      _canvasName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paint(
      _name: string,
      _xs: BigNumberish[],
      _ys: BigNumberish[],
      _values: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferShares(
      _canvasName: string,
      _quantity: BigNumberish,
      _from: string,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
